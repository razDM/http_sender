import cx_Oracleimport xml.etree.ElementTree as ETimport requestsimport csvimport time
class Oracle():    def __init__(self,sql,no_rec):        self.sql = sql        self.no_req = no_rec    def makedatafile(self):        ip = 'my.domain.go.ro'        port = '1521'        SID = 'RAZTST'        DNS_TNS = cx_Oracle.makedsn(ip, port, SID)        db = cx_Oracle.connect('user','pass',DNS_TNS)        self.cur = db.cursor()        self.query = self.cur.execute(self.sql)        self.output = self.cur.fetchmany(self.no_req)##########Append the header of sql export#################          cols = []        for x in self.cur.description:             cols.append(x[0])        # f = open("test20171124.dat", "w")        # for t in self.output:        #     line = ','.join(str(x) for x in t)        #     f.write(line + '\n')        # f.close() ##############MAP Instance sql query to file name################       if self.sql == "Bridge_MNP":         if self.sql == 00:             fp = open('00.csv', 'w')            myfile = csv.writer(fp, lineterminator='\n')            myfile.writerow(cols)            myfile.writerows(self.output)            fp.close()            print ('00 Done')        if self.sql == 01:            fp = open('01.csv', 'w')            myfile = csv.writer(fp, lineterminator='\n')            myfile.writerow(cols)            myfile.writerows(self.output)            fp.close()            print ('01 Done')                    self.cur.close()        db.close()#############DIRECTLY map Oracle cursor output to XML Template and send it ##################      def makefile(self):        ip = 'my.domain.go.ro'        port = '1521'        SID = 'RAZTST'        DNS_TNS = cx_Oracle.makedsn(ip, port, SID)        db = cx_Oracle.connect('user', 'pass', DNS_TNS)        self.cur = db.cursor()        self.query = self.cur.execute(self.sql)        self.output = self.cur.fetchmany(self.no_req)        for x_identity_type, x_identity_number in self.output:            a = x_identity_number            b = a + '.xml'###################Write to file####################################            tree = ET.parse('bridge00.xml')            root = tree.getroot()            for rootEntityIdentityNumber in root.iter('rootEntityIdentityNumber'):                new_rootEntityIdentityNumber = a                rootEntityIdentityNumber.text = new_rootEntityIdentityNumber            tree.write(b)   ######SEND#########            with open(b, 'rb') as BridgeMNP:                headers = {'content-type': 'application/soap+xml'}                response = requests.post(url, data=BridgeMNP, headers=headers)                print(a,response)        self.cur.close()        db.close()################Read files generated by Oracle.makedatafile()################### class readSend():    def __init__(self,file,url):        self.file = file        self.url = url    def readdat(self): ############Mapping to xml logic#############################        if self.file == 00:            with open ('00.csv') as csv_file:                reader = csv.DictReader(csv_file)                for row in reader:                    a = row['X_IDENTITY_TYPE']                    b = row['X_IDENTITY_NUMBER']                    c = '00_'+b + '.xml'                                    tree = ET.parse('bridge00.xml')                    root = tree.getroot()                    for rootEntityIdentityNumber in root.iter('rootEntityIdentityNumber'):                        rootEntityIdentityNumber.text = b                    for rootEntityIdentityType in root.iter('rootEntityIdentityType'):                        rootEntityIdentityType.text = a                        tree.write(c)                        print (c)     start = time.time()    #######SEND REQ#####################                    with open(c, 'rb') as Brid:                        headers = {'content-type': 'application/soap+xml'}                        response = requests.post(self.url, data=Brid, headers=headers)      print (response)                    roundtrip = time.time()-start                    print(roundtrip)                if self.file == 01:              with open ('01.csv') as csv_file:                reader = csv.DictReader(csv_file)                for row in reader:                    a = row['IDENTITY_TYPE']                    b = row['IDENTITY_NUMBER']                    c = '01_'+b + '.xml'                                    tree = ET.parse('XDS_01.xml')                    root = tree.getroot()                    for identity_type in root.iter('identity_type'):                        identity_type.text = a                    for identity_number in root.iter('identity_number'):                        identity_number.text = b                        tree.write(c)                        print(c)                        start = time.time()                        with open(c, 'rb') as Fir:                            headers = {'content-type': 'application/soap+xml'}                            response = requests.post(self.url, data=Firmo, headers=headers)                            print (response)                        roundtrip = time.time()-start                        print(roundtrip)
####################################Variables#########################################################3
00 = "select x_identity_type,x_identity_number from table_A where x_identity_type in ('X')"01 = "SELECT cu AS IDENTITY_NUMBER,'CU' as IDENTITY_TYPE FROM TABLE_B fir"URL_00 = "http://google/come/method1"URL_01 = "http://google/come/method2"
#####################################Input Var#########################################################no_recs = input("Input No Records to be fetched:")nr = int(no_recs)func = input("For batch req send type 1 _ For generate the files type 2:")f = int(func)####################################Main###############################################################
if __name__== '__main__':    if f == 1:###MAKE And send requests#####        raz1 = Oracle(00, nr)        raz2 = Oracle(01,nr)        raz1.makedatafile()        raz2.makedatafile()        readSend_r1 = readSend(00,URL_00)        readSend_r2 = readSend(01,URL_01)        readSend_r1.readdat()        readSend_r2.readdat()    if f == 2: #### Justmake files##########        raz1 = Oracle(00, nr)        raz2 = Oracle(01,nr)        raz1.makedatafile()        raz2.makedatafile()    if f == 3:        raz3 = readSend(files)        raz3.readdat() 
TO-DO's:
Improve the reporting format of the rountrip time.Map to JSON and send requests.make a more dinamic object instance.
